-- Práctica #2: Creación de Tablas Complejas y
-- Consultas Avanzadas
-- Alumnos: 
-- * Paredes Zamudio Luis Daniel
-- * Rivera Morales David
-- * Tapia Hernandez Carlos Alberto

-- Paso 1: Implementación del Esquema

CREATE TABLE Departments (
    department_id NUMBER PRIMARY KEY,
    department_name VARCHAR2(50) NOT NULL,
    budget NUMBER,
    CONSTRAINT departments_budget_not_zero CHECK (budget > 0)
);

CREATE TABLE Employees (
    -- Al ser un ID podemos ocupar el comando 'GENERATED BY DEFAULT AS IDENTITY'
    -- para actuar como un AUTOINCREMENT, ya que las BD de Oracle, para hacer
    -- la funcion de AUTOINCREMENT necesita un trigger o ocupar ese comando. 
    -- employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	employee_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    fst_name VARCHAR2(50) NOT NULL,
	lst_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone_number VARCHAR2(15),
    hire_date DATE NOT NULL,
    job_title VARCHAR2(50),
    department_id NUMBER,
    salary NUMBER,
    CONSTRAINT employee_salary_not_zero CHECK (salary > 0),
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

CREATE TABLE Projects (
    project_id NUMBER PRIMARY KEY,
    project_name VARCHAR2(100) NOT NULL,
    start_date DATE,
    end_date DATE,
    budget NUMBER,
    CONSTRAINT project_budget_not_zero CHECK (budget >= 0)
);

CREATE TABLE Salaries (
    salary_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    employee_id NUMBER,
    salary_amount NUMBER CHECK (salary_amount > 0),
    salary_date DATE NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

CREATE TABLE Project_Assignments (
    assignment_id NUMBER PRIMARY KEY,
    employee_id NUMBER,
    project_id NUMBER,
    -- el nombre 'roole' parece ser aproposito. 
    roole VARCHAR2(50),
    hours_allocated NUMBER,
    CONSTRAINT project_assigments_hours_allocated_not_zero CHECK (hours_allocated >= 0),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);


-- Paso 2. Inserción de Datos

-- Insertar departamentos
INSERT INTO Departments (department_id, department_name, budget) VALUES (1, 'Human Resources', 50000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (2, 'Finance', 75000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (3, 'IT Support', 100000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (4, 'Marketing', 60000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (5, 'Sales', 90000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (6, 'Customer Service', 45000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (7, 'Product Development', 120000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (8, 'Legal', 70000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (9, 'Operations', 80000);
INSERT INTO Departments (department_id, department_name, budget) VALUES (10, 'Research & Development', 95000);

-- Insertar empleados
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (1, 'Alice', 'Johnson', 'alice.johnson@example.com', '123-456-7890', TO_DATE('2022-01-15', 'YYYY-MM-DD'), 'Software Engineer', 3, 7000);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (2, 'Bob', 'Smith', 'bob.smith@example.com', '234-567-8901', TO_DATE('2022-03-22', 'YYYY-MM-DD'), 'Project Manager', 1, 8000);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (3, 'Charlie', 'Brown', 'charlie.brown@example.com', '345-678-9012', TO_DATE('2022-05-10', 'YYYY-MM-DD'), 'UX Designer', 4, 6500);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (4, 'Diana', 'Clark', 'diana.clark@example.com', '456-789-0123', TO_DATE('2022-07-18', 'YYYY-MM-DD'), 'Data Analyst', 6, 7200);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (5, 'Edward', 'Miller', 'edward.miller@example.com', '567-890-1234', TO_DATE('2022-09-25', 'YYYY-MM-DD'), 'Marketing Specialist', 4, 6000);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (6, 'Fiona', 'Davis', 'fiona.davis@example.com', '678-901-2345', TO_DATE('2022-11-30', 'YYYY-MM-DD'), 'Customer Support', 6, 5500);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (7, 'George', 'Martinez', 'george.martinez@example.com', '789-012-3456', TO_DATE('2023-01-15', 'YYYY-MM-DD'), 'Financial Analyst', 2, 7300);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (8, 'Hannah', 'Wilson', 'hannah.wilson@example.com', '890-123-4567', TO_DATE('2023-03-20', 'YYYY-MM-DD'), 'HR Coordinator', 1, 6700);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (9, 'Ian', 'Lee', 'ian.lee@example.com', '901-234-5678', TO_DATE('2023-05-25', 'YYYY-MM-DD'), 'Web Developer', 3, 7100);
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (10, 'Julia', 'Taylor', 'julia.taylor@example.com', '012-345-6789', TO_DATE('2023-07-30', 'YYYY-MM-DD'), 'Operations Manager', 9, 7800);

-- Insertar proyectos
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (1, 'Website Redesign', TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-06-30', 'YYYY-MM-DD'), 200000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (2, 'New CRM System', TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-08-31', 'YYYY-MM-DD'), 150000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (3, 'Mobile App Development', TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'), 175000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (4, 'Data Warehouse Implementation', TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 300000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (5, 'Marketing Campaign', TO_DATE('2024-05-01', 'YYYY-MM-DD'), TO_DATE('2024-10-31', 'YYYY-MM-DD'), 120000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (6, 'Product Launch', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-11-30', 'YYYY-MM-DD'), 250000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (7, 'Employee Training Program', TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 80000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (8, 'Infrastructure Upgrade', TO_DATE('2024-08-01', 'YYYY-MM-DD'), TO_DATE('2024-11-30', 'YYYY-MM-DD'), 130000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (9, 'Customer Feedback System', TO_DATE('2024-09-01', 'YYYY-MM-DD'), TO_DATE('2025-03-31', 'YYYY-MM-DD'), 160000);
INSERT INTO Projects (project_id, project_name, start_date, end_date, budget) VALUES (10, 'Regulatory Compliance', TO_DATE('2024-10-01', 'YYYY-MM-DD'), TO_DATE('2025-06-30', 'YYYY-MM-DD'), 190000);

-- Insertar salarios
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (1, 1, 5000, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (2, 2, 6000, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (3, 3, 5500, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (4, 4, 7000, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (5, 5, 6500, TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (6, 1, 5200, TO_DATE('2024-02-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (7, 2, 6100, TO_DATE('2024-02-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (8, 3, 5600, TO_DATE('2024-02-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (9, 4, 7100, TO_DATE('2024-02-15', 'YYYY-MM-DD'));
INSERT INTO Salaries (salary_id, employee_id, salary_amount, salary_date) VALUES (10, 5, 6600, TO_DATE('2024-02-15', 'YYYY-MM-DD'));

-- Insertar asignaciones de proyecto
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (1, 1, 1, 'Lead Developer', 120);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (2, 2, 1, 'Project Manager', 100);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (3, 3, 2, 'UX Designer', 110);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (4, 4, 3, 'Data Analyst', 130);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (5, 5, 4, 'Marketing Specialist', 90);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (6, 6, 5, 'Customer Support', 80);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (7, 7, 6, 'Financial Analyst', 150);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (8, 8, 7, 'HR Coordinator', 70);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (9, 9, 8, 'Web Developer', 125);
INSERT INTO Project_Assignments (assignment_id, employee_id, project_id, roole, hours_allocated) VALUES (10, 10, 9, 'Operations Manager', 140);

-- Paso 3. Consultas Avanzadas
-- Restricciones: No se pueden usar 'joins'

-- 1. Selecciona los nombres y apellidos de todos los empleados que trabajan en un departamento con un
-- presupuesto mayor a 1,000,000
-- Es normal que no haya resultados, pero es una query válida.
SELECT fst_name, lst_name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE budget > 1000000);

-- 2. Obtén los nombres y apellidos de los empleados que tienen un salario mayor al promedio de todos
-- los salarios. Ordena los resultados por el salario en orden descendente.
-- Hint: Utiliza la función de agregación que calcula el promedio para comparar los salarios individuales
-- con el promedio.
--
-- Se puede hacer una consulta secundaria para obtener el promedio, redondeado a un entero, y luego sobre
-- ese valor aplicar el WHERE de la consulta.
SELECT fst_name, lst_name FROM Employees WHERE salary > (SELECT ROUND(AVG(salary)) from Employees);

-- 3. Encuentra todos los proyectos que tienen un presupuesto entre 500,000 y 1,000,000. Muestra el
-- nombre del proyecto y su presupuesto.
-- Hint: Usa la cláusula para filtrar los presupuestos dentro del rango especificado.
--
-- Como el 1. , no regresa un valor ya que no existen proyectos con esas condiciones, pero la query
-- sigue siendo valida. 
SELECT project_name, budget from Projects WHERE budget BETWEEN 500000 AND 1000000;

-- 4. Inserta un nuevo empleado en la tabla Employees con un salario y asigna este empleado a un
-- departamento especı́fico.
-- Hint: Asegúrate de asignar correctamente el ID del departamento en la nueva fila que insertes.
INSERT INTO Employees (employee_id, fst_name, lst_name, email, phone_number, hire_date, job_title, department_id, salary) 
    VALUES (11, 'Daniel', 'Paredes', 'danielparedes@ciencias.unam.mx', '556-937-7986', TO_DATE('2024-08-22', 'YYYY-MM-DD'), 'IT Manager', 3, 8500);

-- 5. Actualiza el salario de todos los empleados cuyo tı́tulo de trabajo es ’Manager’ incrementándolo en un 10 %.
-- Hint: Usa una operación matemática para incrementar los salarios en función de su valor actual.
UPDATE Employees SET salary = (salary + (salary*.10)) WHERE job_title LIKE '%Manager';

-- 6. Elimina todos los registros de empleados que no tienen ningún proyecto asignado.
-- Hint: Utiliza una subconsulta o un operador de comparación para identificar empleados sin asig-
-- naciones de proyectos.
DELETE FROM Employees WHERE employee_id NOT IN (SELECT employee_id FROM Project_Assignments);


-- 7. Cuenta cuántos empleados trabajan en cada departamento y muestra el nombre del departamento
-- junto con el número de empleados. Filtra los resultados para mostrar solo los departamentos con
-- más de 10 empleados.
-- Hint: Usa la función de agregación que cuenta filas para agrupar los empleados por departamento.

-- 8. Encuentra el salario mı́nimo y máximo que reciben los empleados en el departamento de ’IT’.
-- Muestra el tı́tulo del trabajo, el salario mı́nimo y el salario máximo.
-- Hint: Usa funciones de agregación para calcular los valores mı́nimo y máximo.
SELECT MIN(salary) AS ITSalaryMin, MAX(salary) AS ITSalaryMax FROM Employees WHERE department_ID = 3;


-- 9. Encuentra los nombres de los proyectos que comenzaron en el año 2023 y que están en el departa-
-- mento con el presupuesto más alto.
-- Hint: Usa una subconsulta para obtener el presupuesto más alto y filtra los proyectos por la fecha
-- de inicio.

-- Solo una idea que tuve. La probe y me marcaba ORA-00904: "DEPARTMENT_ID": invalid identifier. Quiza
-- sirva para la version final. 
-- SELECT project_name FROM Projects WHERE start_date BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD') AND TO_DATE('2023-12-31', 'YYYY-MM-DD')
 --   AND department_id = (SELECT department_id FROM Departments WHERE budget = (SELECT MAX(budget) FROM Departments));

-- 10. Selecciona los nombres y apellidos de los empleados que tienen un correo electrónico que contiene
-- el dominio ’example.com’. Asegúrate de que el correo electrónico sea único.
-- Hint: Filtra los resultados usando un patrón que coincida con el dominio ’example.com’ en la
-- dirección de correo electrónico.

-- 11. Muestra los nombres de los empleados que están trabajando en más de un proyecto. Ordena los
-- resultados alfabéticamente.
-- Hint: Agrupa los resultados por empleado y filtra aquellos que tienen más de una asignación de
-- proyecto.

-- 12. Selecciona el nombre del proyecto y el total de horas asignadas a cada proyecto. Filtra los resultados
-- para mostrar solo los proyectos con más de 1000 horas asignadas.
-- Hint: Usa una función de agregación para sumar las horas asignadas y filtra los proyectos que
-- cumplan con el criterio.